import 'dotenv/config';
import express from 'express';
import helmet from 'helmet';
import morgan from 'morgan';
import compression from 'compression';
import cors from 'cors';
import { Client, GatewayIntentBits, InteractionType, Partials } from 'discord.js';

const app = express();
const PORT = process.env.PORT || 3000;

// Middlewares enterprise
app.use(helmet());
app.use(compression());
app.use(cors({ origin: '*' }));
app.use(morgan('combined'));
app.use(express.json());

// Health
app.get('/health', (_req, res) => res.status(200).json({ ok: true }));
app.get('/ready',  (_req, res) => res.status(200).json({ ready: true }));
app.get('/', (_req, res) => res.send('👑 Royal backend (Railway) + Discord bot online'));

const server = app.listen(PORT, () => {
  console.log(`🚂 Railway escuchando en :${PORT}`);
});

// ---- Discord Bot ----
const client = new Client({
  intents: [GatewayIntentBits.Guilds],
  partials: [Partials.Channel]
});

client.once('ready', () => {
  console.log(`🤖 Bot conectado como ${client.user.tag}`);
});

// Manejo de slash-commands
client.on('interactionCreate', async (interaction) => {
  if (interaction.type !== InteractionType.ApplicationCommand) return;

  try {
    if (interaction.commandName === 'ping') {
      await interaction.reply({ content: '🏓 Pong | Latencia ok', ephemeral: true });
    }

    if (interaction.commandName === 'royal') {
      await interaction.reply({
        content: '👑 Street Emporio Royal — uptime on fire.',
        ephemeral: true
      });
    }
  } catch (err) {
    console.error('❌ Error en command:', err);
    if (interaction.deferred || interaction.replied) {
      await interaction.followUp({ content: 'Error interno.', ephemeral: true });
    } else {
      await interaction.reply({ content: 'Error interno.', ephemeral: true });
    }
  }
});

process.on('SIGTERM', () => server.close(() => process.exit(0)));
process.on('SIGINT',  () => server.close(() => process.exit(0)));

client.login(process.env.DISCORD_TOKEN);
