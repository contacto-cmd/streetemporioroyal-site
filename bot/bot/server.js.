// server.js ‚Äî Enterprise-grade HTTP server for Railway
import 'dotenv/config';
import express from 'express';
import helmet from 'helmet';
import compression from 'compression';
import cors from 'cors';
import morgan from 'morgan';

const app = express();
const PORT = process.env.PORT || 3000;

// Seguridad y rendimiento
app.disable('x-powered-by');
app.set('trust proxy', 1);
app.use(helmet());
app.use(compression());
app.use(cors({ origin: '*', methods: ['GET'] }));
app.use(express.json({ limit: '100kb' }));

// Logs en formato combinado (√∫til en Railway)
app.use(morgan('combined'));

// Healthchecks (para orquestadores y uptime monitors)
app.get('/health', (_, res) => res.status(200).json({ ok: true }));
app.get('/ready',  (_, res) => res.status(200).json({ ready: true }));

// Home (status simple)
app.get('/', (_, res) => {
  res.type('text/plain').send('üëë Street Emporio Royal ‚Äî HTTP OK');
});

// Arranque y apagado elegante
const server = app.listen(PORT, () => {
  console.log(`üöÇ HTTP server up on :${PORT}`);
});

for (const sig of ['SIGTERM', 'SIGINT']) {
  process.on(sig, () => {
    console.log(`‚ÜòÔ∏è  ${sig} recibido, cerrando...`);
    server.close(() => {
      console.log('‚úÖ HTTP cerrado limpio'); 
      process.exit(0);
    });
  });
}

// Manejo b√°sico de errores no controlados
process.on('unhandledRejection', (err) => {
  console.error('‚ùå UnhandledRejection:', err);
});
process.on('uncaughtException', (err) => {
  console.error('‚ùå UncaughtException:', err);
});

