// index.js - Royal backend minimal
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const { SignJWT, importPKCS8 } = require('jose');
const { Pool } = require('pg');

const PORT = process.env.PORT || 3000;
const JOBS_FILE = path.join(__dirname, 'jobs.json');
const DB = new Pool({ connectionString: process.env.DATABASE_URL, ssl: { rejectUnauthorized: false } });

// ensure files
if (!fs.existsSync(JOBS_FILE)) fs.writeFileSync(JOBS_FILE, JSON.stringify([]));

const app = express();
app.use(bodyParser.json());

// load private key PKCS8 (base64 or multiline)
let RSA_PRIVATE_PEM = process.env.AHT_SER_HP_KEY_JMAI_PKCS8 || '';
let privateKey;
(async () => {
  try {
    if (RSA_PRIVATE_PEM && RSA_PRIVATE_PEM.includes("-----BEGIN")) {
      privateKey = await importPKCS8(RSA_PRIVATE_PEM, 'RS256');
      console.log('🔐 RSA private key loaded (multiline).');
    } else if (RSA_PRIVATE_PEM) {
      // base64 decode into PEM
      const pem = Buffer.from(RSA_PRIVATE_PEM, 'base64').toString('utf8');
      privateKey = await importPKCS8(pem, 'RS256');
      console.log('🔐 RSA private key loaded (base64).');
    } else console.warn('⚠️ No RSA private key present.');
  } catch (e) { console.error('Key load error', e.message); }
})();

// helpers for file job queue
function readJobs(){ return JSON.parse(fs.readFileSync(JOBS_FILE,'utf8')||'[]'); }
function writeJobs(j){ fs.writeFileSync(JOBS_FILE, JSON.stringify(j,null,2)); }
function pushJob(job){ const j=readJobs(); j.push(job); writeJobs(j); }

// health
app.get('/health', (req,res)=> res.json({ok:true,ts:Date.now()}));

// submit
app.post('/api/submit', async (req,res)=>{
  const { title, desc, contact, files, meta } = req.body || {};
  if(!title) return res.status(400).json({ok:false,error:'missing title'});
  const id = 'proj-'+Date.now();
  // save to DB
  try {
    await DB.query('INSERT INTO projects(id,title,description,contact,files,meta) VALUES($1,$2,$3,$4,$5,$6)',
      [id,title,desc,contact,files||[],meta||{}]);
  } catch(e){ console.warn('DB write project error', e.message); }
  const job = { id:'job-'+Date.now(), type:'submit', payload:{ projectId:id }, status:'queued', createdAt:new Date().toISOString() };
  pushJob(job);
  // discord notify
  if(process.env.ROYAL_DISCORD_WEBHOOK){
    fetch(process.env.ROYAL_DISCORD_WEBHOOK, {method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({content:`🛡️ Nuevo proyecto: ${title} (ID:${id})`})}).catch(()=>{});
  }
  res.json({ok:true,id,jobId:job.id});
});

// render3d
app.post('/api/render3d', (req,res)=>{
  const { projectId, assetUrl, params } = req.body || {};
  if(!projectId) return res.status(400).json({ok:false,error:'missing projectId'});
  const job = { id:'job-render-'+Date.now(), type:'render3d', payload:{projectId,assetUrl,params}, status:'queued', createdAt:new Date().toISOString() };
  pushJob(job);
  res.json({ok:true,jobId:job.id});
});

// jobs pending (worker polls)
app.get('/jobs/pending',(req,res)=> res.json(readJobs().filter(j=>j.status==='queued')));

// worker reports
app.post('/jobs/report', async (req,res)=>{
  const { jobId, status, result } = req.body || {};
  if(!jobId) return res.status(400).json({ok:false,error:'missing jobId'});
  const jobs = readJobs();
  const i = jobs.findIndex(x=>x.id===jobId);
  if(i>=0){ jobs[i] = {...jobs[i], status, result, finishedAt:new Date().toISOString()}; writeJobs(jobs); }
  // optionally persist to DB
  try {
    await DB.query('INSERT INTO jobs(id,project_id,type,payload,status,result) VALUES($1,$2,$3,$4,$5,$6)',
      [jobId, result && result.projectId || null, result && result.type || null, result || {}, status, result || {}]);
  } catch(e){}
  res.json({ok:true});
});

// token endpoint (RS256)
app.post('/api/token', async (req,res)=>{
  if(!privateKey) return res.status(500).json({ok:false,error:'private key missing'});
  const { sub, scope } = req.body || {};
  try{
    const jwt = await new SignJWT({ sub: sub||'anon', scope: scope||['aht:use'] })
      .setProtectedHeader({ alg:'RS256' })
      .setIssuedAt()
      .setExpirationTime('1h')
      .sign(privateKey);
    res.json({ok:true,token:jwt});
  }catch(e){ console.error(e); res.status(500).json({ok:false,error:'sign error'}); }
});

app.listen(PORT, ()=> console.log(`🔥 Royal backend listening on ${PORT}`));
